{"meta":{"title":"网易先知&&网易七鱼前端团队博客","subtitle":null,"description":null,"author":"giflee","url":"http://nsfi.github.io/blog"},"pages":[],"posts":[{"title":"JavaScript运行机制:事件驱动编程详解","slug":"JavaScript运行机制-事件驱动编程详解","date":"2018-01-28T16:27:35.000Z","updated":"2018-01-28T17:11:26.000Z","comments":true,"path":"2018/01/29/JavaScript运行机制-事件驱动编程详解/","link":"","permalink":"http://nsfi.github.io/blog/2018/01/29/JavaScript运行机制-事件驱动编程详解/","excerpt":"","text":"先看一个例子1234567891011121314151617181920212223(function test() &#123; setTimeout(function() &#123; console.log(1) &#125;, 0); new Promise(function(resolve) &#123; console.log(2); for (var i = 0; i &lt; 10000; i++) &#123; i == 9999 &amp;&amp; resolve(); &#125; console.log(3); &#125;).then(function() &#123; console.log(4); new Promise(function(resolve) &#123; setTimeout(function() &#123; resolve(); console.log(5); &#125;, 0); console.log(6); &#125;).then(function() &#123; console.log(7); &#125;); &#125;); console.log(8); return 9;&#125;)() 在这个例子中，有setTimeout、Promise、回调函数以及函数返回值等等，那么控制台当中会以一个什么顺序打印这些数字呢？现在不知道答案很正常，不妨先思考一下，带着问题看下面的内容。 阻塞与线程在搞清楚JavaScript运行机制之前，我们需要了解什么是阻塞，什么是线程。 大学我们学《操作系统》这门课程，里面详细的讲述了进程、线程的概念，以及操作系统进程调度相关的内容，线程在执行中如果遇到磁盘读写或者网络通信(统称为I/O操作)，通常要耗费较长的时间，这是操作系统会剥夺这个线程的CPU控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程的调度方式称为阻塞。当I/O操作结束，操作系统将这个线程的阻塞状态解除，恢复其对CPU的控制权，令其继续执行。这种I/O模式就是我们通常说的同步式I/O。 相应地，异步式I/O是针对上述的I/O操作，不采用阻塞模式，当线程遇到I/O操作时，不会以阻塞的方式等待I/O操作的结束，而只是将I/O操作请求发送给操作系统，然后继续执行下一条语句。当操作系统完成I/O操作，以事件的形式通知执行I/O操作的线程，线程会在特定的时间处理这个事件，可见使用异步式I/O，单线程即可胜任。这里提到了异步式I/O的一个重要的概念：事件！这也是我们这篇文章要讨论的核心。 接下来我们看看异步式I/O和同步式I/O到底有什么区别？ 我们知道，一个线程同时只能处理一项任务，并且I/O操作往往比CPU计算要耗时得多，所以在同步式I/O模式下，当I/O操作执行时，线程被阻塞，CPU处于空闲的状态，如果要提高CPU的利用率，必须通过多线程，一个线程因为同步式I/O被阻塞了，还有其它线程在工作，多线程可以让CPU资源不被阻塞中的线程浪费，这也是众多多线程语言采用的模式。既然多线程+同步式I/O也能提高CPU的吞吐量，我们为什么还要讨论异步式I/O+事件循环的模式呢？在回答这个问题之前，我们先看两张图： 左：多线程同步式I/O 右：单线程异步式I/O 上图分别是同步式I/O+多线程和异步式I/O+事件循环的示意图。假设我们有一个任务，可以分为两个计算部分和一个I/O部分。现在我们要完成5项这个任务。 同步式I/O+多线程模式如左图所示，5项任务分别由5个线程来完成，从CPU的维度来看，CPU 先分配给线程1进行计算1 -&gt; 分配给线程2进行计算1 -&gt; 分配给线程3进行计算1 -&gt; 分配给线程4进行计算1 -&gt; 分配给线程5进行计算1 至此5个任务的计算1都已完成，然后任务1的I/O操作结束，CPU又 分配给线程1进行计算2 -&gt; 分配给线程2进行计算2 -&gt; 分配给线程3进行计算2 -&gt; 分配给线程4进行计算2 -&gt; 分配给线程5进行计算2 。 最后完成5项任务。 再看右图，CPU可以一直在一个线程上完成所有计算，执行的顺序和效果和多线程并无差别，可见，单线程事件驱动的异步式 I/O 比传统的多线程同步式I/O，少了多线程的开销，对于操作系统来说，创建一个线程的代价是非常昂贵的：需要给它分配内存、列入调度、在线程切换时还要执行内存换页、清空CPU缓存等等。说到这里，异步式I/O+事件循环模式的好处不言而喻了，如下列表，简单介绍了两种模式的特点。 同步式I/O和异步式I/O的特点 当然，异步式I/O+事件循环模式也不是没有它的缺点，因为编码都需要是异步的，不符合人们一般的程序设计思维，容易让控制流变得晦涩难懂，给编码和调试都带来不小的困难。前端工程师一直被异步的回调和函数嵌套所困扰，不过在社区以及大牛的努力之下，越来越多的解决方案以及标准逐步完成，例如ES6中的Promise、ES2017中的async/await等等，网上有很多详细介绍的资料，我们不展开介绍。 1234567891011121314151617//异步回调嵌套$.get('url', function(data) &#123; $.get('url1', data, function(data1) &#123; $.get('url2', data1, function(data2) &#123; console.log(data2); &#125;, 'json'); &#125;, 'json');&#125;, 'json');//用async和await的实现var asyncGetdata = async function() &#123; var data = await $.get('url'); var data1 = await $.get('url1', data); var data2 = await $.get('url2', data1); console.log(data2);&#125;;asyncGetdata(); JavaScript运行机制：消息队列和事件循环我们常说“JavaScript是一门单线程的语言”，所以JavaScript是采用异步式I/O+事件循环模式的。但这里我要澄清一下，所谓的单线程，是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个。我们称它主线程。 但是实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。我们称它们工作线程。 单线程也就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为I/O很慢，不得不等着结果出来，再往下执行。 好在我们上文中提到，采用异步式I/O+事件循环模式时，当耗时的I/O的操作结束后，会以事件的形式通知主线程，这样就可以避免阻塞，那么这个通知机制是怎样实现的呢？答案是利用消息队列和事件循环。 消息队列当采用异步式I/O+事件循环后，所有任务可以分成两种，一种是同步任务，另一种是异步任务（此处为了理解方便，先只分为同步任务和异步任务，后面我们会细分为宏任务、微任务、正常任务）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，暂时不进入主线程而是进入消息队列的任务，只有主线程的同步任务全部结束后该任务才会进入主线程执行。用一句话概括就是： 工作线程将消息放到消息队列，主线程通过事件循环去取消息。 所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。 主线程之外，还存在一个消息队列。只要异步任务有了运行结果，就在消息队列之中放置一个事件。 一旦”执行栈”中的所有同步任务执行完毕，系统就会读取消息队列，看看里面有哪些事件。那些对应的异步任务结束等待状态，进入执行栈，开始执行。 主线程只会做一件事情，就是从消息队列里面取消息、执行消息，再取消息、再执行，不断重复上面的第三步。 用图表示这个过程就是： 事件循环上文提到主线程从消息队列中读取消息，这个过程是循环不断的。当消息队列为空时，就会等待直到消息队列变成非空。而且主线程只有在将当前的消息执行完成后，才会去取下一个消息。这种机制就叫做事件循环机制，取一个消息并执行的过程叫做一次事件循环。 可见异步过程的回调函数，一定不在当前这一轮事件循环中执行，可不一定会在下一轮事件循环中进行(取决于异步过程结束往消息队列添加消息时，队列中是否有其它消息)。 为了更好地理解事件循环，请看下图: 转引自Philip Roberts的演讲《Help, I’m stuck in an event-loop》 上图中，主线程运行的时候，产生堆（heap）和栈（stack），当栈中的代码调用DOM事件绑定、ajax请求、以及定时器等外部API时就会交给浏览器内核的其他模块，即上文中提到的工作线程进行处理。 webkit内核在Javasctipt执行引擎之外，有一个重要的模块是webcore模块。对于图中WebAPIs提到的三种API，webcore分别提供了DOM Binding、network、timer模块来处理底层实现 等这些工作线程处理完成后，就会往消息队列里放置onClick、onLoad、onDone等相应的事件。只要调用栈中的代码执行完毕，主线程就会依次去读取消息队列，并执行那些事件所对应的回调函数。 从setTimeout看消息队列与事件循环下面依然是用Philip Roberts的演讲中的一个栗子来说明事件循环机制究竟是怎么执行setTimeout的。 首先main()函数的执行上下文入栈，开始执行同步任务。 遇到console.log(‘Hi’)，此时log(‘Hi’)入栈，console.log方法只是一个webkit内核支持的普通的方法，它是同步任务，所以log(‘Hi’)方法立即出栈被引擎执行。此时输出’Hi’。 当遇到setTimeout的时候，将setTimeout(callback,5000)添加到执行栈。 调用栈发现setTimeout是之前提到的事件循环模型中WebAPIs中的方法，因此将其出栈执行后将延时执行的函数交给浏览器的timer模块进行处理。 timer模块去处理延时执行的函数，此时执行引擎接着立即继续往下处理后面代码，于是将log(‘SJS’)加入执行栈，接下来log(‘SJS’)出栈执行，输出’SJS’。而执行引擎在执行完console.log(‘SJS’)后，程序处理完毕，main()方法也出栈。此时一项同步任务全部完成。 当timer模块中延时方法规定的时间到了之后就将其放入到任务队列之中，此时调用栈中的task已经全部执行完毕，主线程处于空闲状态。 于是主线程在下一次事件轮询时，发现刚刚放入消息队列的cb事件，便将cb入栈。 接着执行cb里面的代码，将log(‘there’)入栈然后出栈执行，输出’there’，等到log执行结束之后cb函数运行完毕，cb接着出栈。之后主线程处于空闲状态，一直不停地轮询消息队列，看看没有要执行的事件。 宏任务(macro-task)、微任务(micro-task)、正常任务(task)还记得我在最开始抛出来的那个例子吗？我们现在再来看一看 1234567891011121314151617181920212223(function test() &#123; setTimeout(function() &#123; console.log(1) &#125;, 0); new Promise(function(resolve) &#123; console.log(2); for (var i = 0; i &lt; 10000; i++) &#123; i == 9999 &amp;&amp; resolve(); &#125; console.log(3); &#125;).then(function() &#123; console.log(4); new Promise(function(resolve) &#123; setTimeout(function() &#123; resolve(); console.log(5); &#125;, 0); console.log(6); &#125;).then(function() &#123; console.log(7); &#125;); &#125;); console.log(8); return 9;&#125;)() 通过上面的介绍，我们已经知道，8、9、1这三个的顺序，但是Promise内的代码是按照什么顺序执行的呢？这里我们要开始介绍macro-task、micro-task和task概念。 其实上文中提到到同步任务和异步任务，分别对应这里介绍的task和macro-task。上文中提到消息队列其实就是macro-task队列，task其实就是执行栈中的同步任务。那么micro-task是什么呢？ 刚才我介绍过事件循环机制，我们知道，当一个任务执行完后，主线程会从macro-task队列(之前说的消息队列)中取出事件，开始下一轮的任务执行。而某些情况下，我们需要某些任务要在本轮事件循环结束前执行，于是，除了macro-task队列外，其实还有一个micro-task队列，里面存放本轮正常任务执行中添加的需要在本轮事件循环结束前、在本轮事件循环所有task结束后执行的任务。 我们要区分任务执行的顺序，一定要搞清楚它是什么类型的任务。setTimeout上文已经讨论得很清楚了，它的回调函数是一个macro-task，会被放到macro-task队列。而对于Promise，被构造时传入的回调函数，是会立即执行的，它是task，会出现在调用栈中。而Promise实例的then方法中的回调函数是micro-task，会在该Promise实例的状态改变时(resolve)被放进micro-task队列。 关于Promise的用法本文不作展开，请自己去学习阮老师的教程 macro-task: setTimeout、setInterval、setImmediate、I/O, UI rendering等 micro-task: process.nextTick、Promises.then、Object.observe等 常见的macro-task和micro-task如上所示，其中setImmediate和process.nextTick是NodeJs里的API，浏览器里并没有，这里只是列举一下。 总之，事件循环的顺序是从script开始第一次循环，随后全局上下文进入函数调用栈 碰到macro-task就将其交给处理它的模块处理完之后将回调函数放进macro-task的队列之中 碰到micro-task也是将其回调函数放进micro-task的队列之中 直到函数调用栈清空只剩全局执行上下文，然后开始执行所有的micro-task，在执行micro-task时如果再碰到micro-task，会将该micro-task继续添加到micro-task队列，当所有可执行的micro-task执行完毕之后，执行栈结束并返回(return) 循环再次执行macro-task队列中的一个任务，执行完之后再执行所有的micro-task，就这样一直循环 增加micro-task和micro-task队列的概念后，用图表示这个过程就是： macro-task和micro-task任务及其队列 123456789101112131415161718192021222324252627282930313233(function test() &#123; setTimeout(function() &#123; console.log(1) &#125;, 0); //回调会被添加到macro-task队列 new Promise(function(resolve) &#123; console.log(2); for (var i = 0; i &lt; 10000; i++) &#123; i == 9999 &amp;&amp; resolve(); &#125; console.log(3); &#125;).then(function() &#123; //回调会在resolve后，添加到micro-task队列 console.log(4); new Promise(function(resolve) &#123; setTimeout(function() &#123; //回调会被添加到macro-task队列 resolve(); console.log(5); &#125;, 0); console.log(6); &#125;).then(function() &#123; console.log(7); //回调会在resolve后，添加到micro-task队列 &#125;); &#125;); console.log(8); return 9;&#125;)()//控制台打印的结果如下：//2//3//8//4//6//9//1//5//7 参考文章JavaScript 运行机制详解：再谈Event Loop定时器从setTimeout说事件循环深入浅出Javascript事件循环机制(上)深入浅出JavaScript事件循环机制(下)JavaScript：彻底理解同步、异步和事件循环(Event Loop)","categories":[],"tags":[]},{"title":"Nodejs实现静态资源服务器","slug":"Nodejs实现静态资源服务器","date":"2017-12-18T03:19:24.000Z","updated":"2018-01-28T08:45:14.000Z","comments":true,"path":"2017/12/18/Nodejs实现静态资源服务器/","link":"","permalink":"http://nsfi.github.io/blog/2017/12/18/Nodejs实现静态资源服务器/","excerpt":"","text":"Nodejs构建静态服务器需要考虑的几个点： 路径分析 不同类型的文件展示 增加文件夹逻辑 形如 ‘http://xxx.com/a/b/‘ , 则查找b目录下是否有index.html,如果有就显示，如果没有就列出该目录下的所有文件及文件夹，并可以进一步访问 增加缓存机制 路由解析123456789const Koa = require('koa')const app = new Koa()app.use( async ( ctx ) =&gt; &#123; console.log(ctx.request.path);&#125;)app.listen(3000);console.log('app started at port 3000 ...'); 纯文本文件查找和读取123456789101112131415161718app.use( ( ctx ) =&gt; &#123; // 拼接出真实路径 let pathName = path.join(staticPath, ctx.request.path); console.log(pathName); // 读取文件 let exist = fs.existsSync(pathName); if (exist === true) &#123; let data = fs.readFileSync(pathName); ctx.response.type = \"html\"; ctx.response.body = data; &#125; else &#123; ctx.response.type = 'text/plain'; ctx.response.body = \"The request URL '\" + pathName + \"' was not found on this server\"; &#125; console.log(exist);&#125;) 不同类型文件的读取MIME值制作映射表MIME.js123456789101112131415161718192021let type = &#123; \"txt\": \"text/plain\", \"xml\": \"text/xml\", \"html\": \"text/html\", \"css\": \"text/css\", \"js\": \"text/javascript\", \"json\": \"application/json\", \"gif\": \"image/gif\", \"png\": \"image/png\", \"jpeg\": \"image/jpeg\", \"jpg\": \"image/jpeg\", \"svg\": \"image/svg+xml\", \"ico\": \"image/x-icon\", \"pdf\": \"application/pdf\", \"swf\": \"application/x-shockwave-flash\", \"tiff\": \"image/tiff\", \"wav\": \"audio/x-wav\", \"wma\": \"audio/x-ms-wma\", \"wmv\": \"video/x-ms-wmv\"&#125;exports.type = type; 通过映射表，根据后缀名来查找 response.type123456const findFileMIME = function (pathName) &#123; // 根据文件后缀名来判断 let filetype = path.extname(pathName).substring(1); if (MIME.type[filetype]) &#123; return MIME.type[filetype]; &#125;&#125; 123let data = fs.readFileSync(pathName);ctx.response.type = findFileMIME(pathName) || 'text';ctx.response.body = data; 完整的文件和文件夹处理12345678910111213141516171819202122232425262728293031323334353637383940const main = async function (ctx, next) &#123; let pathName = path.join(staticPath, ctx.request.path); // 判断文件路径是否存在 let exist = fs.existsSync(pathName); if (exist === true) &#123; // 判断是文件还是文件夹 var stats = fs.statSync(pathName); if (stats.isFile()) &#123; // 如果是文件， 判断文件类型， 并显示文件 let data = fs.readFileSync(pathName); ctx.response.type = findFileMIME(pathName) || 'text'; ctx.response.body = data; &#125; else if (stats.isDirectory()) &#123; // 如果是文件夹, index.html or 文件列表 if (!fs.existsSync(path.join(pathName, 'index.html'))) &#123; // 判断是否存在 index.html ctx.response.type = 'html'; let htmlbody = \"&lt;head&gt;&lt;meta charset = 'utf-8'/&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;\"; let files = await fs.readdir(pathName); for (let i = 0;i&lt;files.length; i++) &#123; // 排除 DS_STORE 文件 if (files[i]!== '.DS_Store') &#123; let hreflink = path.join(ctx.request.path, files[i]); htmlbody = htmlbody + '&lt;li&gt;&lt;a href=\"' + hreflink +'\"&gt;' + files[i] +'&lt;/a&gt;&lt;/li&gt;'; console.log(path.extname(files[i])); &#125; &#125; htmlbody = htmlbody + '&lt;/ul&gt;&lt;/body&gt;'; ctx.response.body = htmlbody; &#125; else &#123; ctx.response.redirect(path.join(ctx.request.path, 'index.html')); &#125; &#125; &#125; else &#123; ctx.response.type = 'text/plain'; ctx.response.body = \"The request URL '\" + pathName + \"' was not found on this server\"; &#125;&#125;;app.use(main); 增加缓存机制目的：为了缓解请求量增大对服务器的压力，采用缓存机制能够减少对服务器文件的读写。 属性： request If-Modified-Since：第一次请求时response 中的 Last-Modified If-Nont-Match： 浏览器第一次请求时 response 中的 ETag response Cache-Control: max-age=【秒】 || no-cache || no-store || public || private ETag: 当前资源在服务器的唯一标志符 Expires Last-Modified: 告诉浏览器当前资源的最后修改时间 HTTP 缓存策略 本地缓存阶段： 先在本地查找该资源，如果存在，且资源未过期，则使用这一资源，不发送 http 请求到服务器 协商缓存阶段： 如果在本地缓存找到对应资源，但是不知道是否过期，则发一个HTTP请求到服务器，然后服务器判断请求的资源在服务器上是否改动过，没有改动过则返回 304，让浏览器使用本地找到的资源 缓存失败： 当服务器发现请求的资源已经修改过，或这是一个新的请求，服务器则返回该资源的数据，并返回200。如果资源未找到则返回 404 本地缓存阶段 Expires：缓存过期的绝对时间GMT，如果设置了max-age，expires会失效 Cache-Control：max-age=【秒】 前端存储方式 Cookie &lt;4k 且会在同域网络请求中进行传输，消耗网络带宽，大量Cookie会导致请求变慢，所以Cookie只保存与权限有关的用户信息。 LocalStorage 存储非敏感的静态数据 SeesionStorage 关闭浏览器后会清空 协商缓存阶段 Last-Modified === if-modified-since 最后修改时间判断 ETag === If-None-Match 文件的唯一符 协商流程：1、客户端请求一个页面（A）。2、服务器返回页面A，并在给A加上一个Last-Modified/ETag。3、客户端展现该页面，并将页面连同Last-Modified/ETag一起缓存。4、客户再次请求页面A，并将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器。5、服务器检查该Last-Modified或ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304和一个空的响应体。 Etag 主要为了解决 Last-Modified 无法解决的一些问题：1、一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；2、某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；3、某些服务器不能精确的得到文件的最后修改时间。 Content-Length：尽管并没有在缓存中明确涉及，Content-Length头部在设置缓存策略时很重要。某些软件如果不提前获知内容的大小以留出足够空间，则会拒绝缓存该内容。 Vary：缓存系统通常使用请求的主机和路径作为存储该资源的键。当判断一个请求是否是请求同样内容时，Vary头部可以被用来提醒缓存系统需要注意另一个附加头部。它通常被用来告诉缓存系统同样注意Accept-Encoding头部，以便缓存系统能够区分压缩和未压缩的内容。 1234567891011121314151617181920212223242526272829303132333435 // ************ 判断 缓存 ***********************let Expires = &#123; fileMatch: /^(\\.gif|\\.png|\\.jpg|\\.js|\\.css|\\.html)$/ig, maxAge: 60*60&#125;;if (path.extname(ctx.request.path).match(Expires.fileMatch)) &#123; //获取最后修改时间 last-modified var stats = fs.statSync(pathName); let lastModified = stats.mtime.toUTCString(); // last-modified if (ctx.request.header['if-modified-since']) &#123; if (ctx.request.header['if-modified-since'] === lastModified) &#123; ctx.status = 304; await next(); return; &#125; &#125; // ETag if (ctx.request.header['if-none-match']) &#123; if (ctx.request.header['if-none-match'] == lastModified) &#123; ctx.status = 304; await next(); return; &#125; &#125; // cache 失效 fetch new data ctx.set('ETag', lastModified); ctx.set('Last-Modified', lastModified); ctx.status = 200; let data = fs.readFileSync(pathName); ctx.response.type = findFileMIME(pathName) || 'text'; ctx.response.body = data; await next();&#125; 参考资料 缓存策略","categories":[],"tags":[]},{"title":"Less代码规范","slug":"Less代码规范","date":"2017-12-06T08:24:22.000Z","updated":"2017-12-15T02:07:05.000Z","comments":true,"path":"2017/12/06/Less代码规范/","link":"","permalink":"http://nsfi.github.io/blog/2017/12/06/Less代码规范/","excerpt":"","text":"Less代码规范Less代码校验规则遵循stylelint:recommended stylelint:recommended stylelint详细规则 目录 术语 规则声明 选择器 属性 文件分类 命名规则 格式 注释 书写顺序 Less书写顺序 属性书写顺序 最佳实践 典型错误 参考 术语 规则声明我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子： 1234.listing &#123; font-size: 18px; line-height: 1.2;&#125; 选择器在规则声明中，“选择器” 负责选取 DOM 树中的元素，这些元素将被定义的属性所修饰。选择器可以匹配 HTML 元素，也可以匹配一个元素的类名、ID, 或者元素拥有的属性。以下是选择器的例子： 1234567.my-element-class &#123; /* ... */&#125;[aria-hidden] &#123; /* ... */&#125; 属性最后，属性决定了规则声明里被选择的元素将得到何种样式。属性以键值对形式存在，一个规则声明可以包含一或多个属性定义。以下是属性定义的例子： 1234/* some selector */ &#123; background: #f1f1f1; color: #333;&#125; 文件分类页面的样式入口文件按顺序引入以下Less文件。 globals.less 全局文件 components.less 组件 sections.less 区块 main.less 页面主体内容 123456789101112131415/* globals.less */@import \"globals/mixins\";@import \"globals/colors\";@import \"globals/fonts\";/* components.less */@import \"components/tabs\";@import \"components/modals\";/* sections.less */@import \"sections/header\";@import \"sections/footer\";/* main.less */@import \"app/main\"; 命名规则CSS的命名规则 统一处理：建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式！ 布局（grid）（.g-）：将页面分割为几个大块，通常有头部、主体、主栏、侧栏、尾部等！ 模块（module）（.m-）：通常是一个语义化的可以重复使用的较大的整体！比如导航、登录、注册、各种列表、评论、搜索等！ 元件（unit）（.u-）：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！ 功能（function）（.f-）：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！ 皮肤（skin）（.s-）：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！非换肤型网站不可滥用此类！ 状态（.z-）：为状态类样式加入前缀，统一标识，方便识别，她只能组合使用或作为后代出现（.u-ipt.z-dis{}，.m-list li.z-sel{}），具体详见命名规则的扩展相关项。功能类和皮肤类样式为表现化的样式，请不要滥用！以上顺序可以按需求适当调整。 12345678910111213141516171819202122232425262728293031323334353637383940/* 统一清除浮动 */.g-bdc:after,.m-dimg ul:after,.u-tab:after &#123; display: block; visibility: hidden; clear: both; height: 0; overflow: hidden; content: '.';&#125;.g-bdc,.m-dimg ul,.u-tab &#123; zoom: 1;&#125;/* 布局 */.g-sd &#123; float: left; width: 300px;&#125;/* 模块 */.m-logo &#123; width: 200px; height: 50px;&#125;/* 元件 */.u-btn &#123; height: 20px; border: 1px solid #333;&#125;/* 功能 */.f-tac &#123; text-align: center;&#125;/* 皮肤 */.s-fc,a.s-fc:hover &#123; color: #fff;&#125; 格式 使用 2 个空格作为缩进。 类名建议使用破折号代替驼峰法。 在一个规则声明中应用了多个选择器时，每个选择器独占一行。 在规则声明的左大括号 { 前加上一个空格。 在属性的冒号 : 后面加上一个空格，前面不加空格。 规则声明的右大括号 } 独占一行。 规则声明之间用空行分隔开。 注释 建议使用行注释代替块注释。 建议注释独占一行。避免行末注释。 给没有自注释的代码写上详细说明，比如： 为什么用到了 z-index例如，// modals are 6000, saving messages are 5500, header is 2000 兼容性处理或者针对特定浏览器的 hack 书写顺序 LESS书写顺序 Extend （扩展） Mixins (混合) 常规样式，在extends和mixins之后添加常规样式允许我们正确地覆盖这些属性（如果需要）。 伪元素和伪类样式 嵌套样式1234567891011121314151617.weather &#123; &amp;:extend(.module); .transition(all 0.3s ease-out); background: LightCyan; &amp;:hover &#123; background: DarkCyan; &#125; &amp;::before &#123; content: \"\"; display: block; &#125; &gt; h3 &#123; .transform(rotate(90deg)); border-bottom: 1px solid white; &#125; ...&#125; 属性书写顺序 → 显示属性 自身属性 文本属性和其他修饰 display width font visibility height text-align position margin text-decoration float padding vertical-align clear border white-space list-style overflow color top min-width background 最佳实践 使用变量命名常用的数字和颜色 典型错误 不要使用 ID 选择器。 不要使用!important 不要使用浏览器私有前缀，使用autoprefixer替代。 嵌套选择器的深度不要超过 3 层！ 1234567.page-container &#123; .content &#123; .profile &#123; // STOP! &#125; &#125;&#125; 不要使用class作为javascript钩子，在react中可使用refs替代javascript钩子。 嵌套选择器的行数不要超过 50 行! 参考 Airbnb CSS / Sass 指南 Netease CSS规范 Sass Style Guide","categories":[],"tags":[]},{"title":"如何发表文章","slug":"Quick-Start","date":"2017-11-20T07:41:32.000Z","updated":"2017-12-15T02:07:05.000Z","comments":true,"path":"2017/11/20/Quick-Start/","link":"","permalink":"http://nsfi.github.io/blog/2017/11/20/Quick-Start/","excerpt":"","text":"快速开始获取源码代码托管在NSFI组下的sf-blog-source中 1$ git clone https://github.com/NSFI/sf-blog-source.git 安装依赖1$ npm install 创建文章1$ hexo new '文章title' 本地服务预览1$ hexo server 生成静态文件1$ hexo g 部署到服务器1$ hexo d 为了保证统一，部署之前最好将代码推到github库中去以后再执行hexo d。 More info: hexo文档","categories":[],"tags":[{"name":"how to use","slug":"how-to-use","permalink":"http://nsfi.github.io/blog/tags/how-to-use/"}]}]}